
import java.awt.image.VolatileImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import edu.mit.jwi.IDictionary;
import edu.mit.jwi.item.POS;
import java.util.Iterator;
import java.util.TreeMap;
import java.text.*;
import edu.sussex.nlp.jws.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HumorInterface.java
 *
 * Created on 2 May, 2012, 12:13:26 AM
 */
/**
 *
 * @author RAJ
 */
public class HumorInterface extends javax.swing.JFrame {

    /** Creates new form HumorInterface */
    public HumorInterface() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Input sentence");

        jTextField1.setText("Your funnies here!");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Test Your Funny Bone Here");

        jButton1.setText("Hit Me!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jButton1)
                .addGap(33, 33, 33)
                .addComponent(jLabel3)
                .addContainerGap(255, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            int y = humortest(jTextField1.getText());
            //javax.swing.ImageIcon(getClass().getResource("/UMadBro_sq.jpg"));
            // Icon i= new Icon() {}
            if (y == 0) {
                jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UMadBro_sq.jpg")));
            } else if (y == 1) {
                jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i-see-what-you-did-there.png")));
            } else {
                jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onedoesnot.png")));
            }
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(HumorInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(HumorInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HumorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        // TODO add your handling code here:
        jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new HumorInterface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private int humortest(String text) throws UnsupportedEncodingException, FileNotFoundException, IOException {

        String findLongestRepeatedSubstring = LRS.findLongestRepeatedSubstring(text);
        if (findLongestRepeatedSubstring.split(" ").length >= 2) {
            //   System.out.println(findLongestRepeatedSubstring);
            return (1);
        } else {
            File file = new File("C:\\Users\\RAJ\\Documents\\NetBeansProjects\\homonyms.txt");
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    new FileInputStream(file), "UTF-8"));
            String line = reader.readLine();
            List<String> homos = new ArrayList<String>();
            while (line != null) {
                //          System.out.println(line.trim());
                homos.add(line.trim().replaceAll(", ", " "));
                line = reader.readLine();
            }
            String sent = text;
            Iterator<String> iterator = homos.iterator();
            int maxmatch = 0;
            while (iterator.hasNext()) {
                //System.out.println(iterator.next());
                String currhomo = iterator.next();

                int thismatch = 0;
                for (String sentcont : sent.split(" ")) {
                    for (String s2 : currhomo.split(" ")) {
                        if (s2.equalsIgnoreCase(sentcont)) {
                            thismatch++;
                            System.out.println(sentcont + " " + currhomo);
                        }
                    }

                }
                if (thismatch > 1) {
                    maxmatch += thismatch;
                }
            }
            if (maxmatch >= 2) {
                return (1);
            } else {
                int i = Alliteration.count(text.split(" "));
                if (i >= 2) {
                    return (1);
                } else {
                    //System.out.println(text.length());
                    if (text.split(" ").length == 2) {
                        String w1 = text.split(" ")[0];
                        String w2 = text.split(" ")[1];
                        String dir = "C:/Program Files (x86)/WordNet";
                        JWS ws = new JWS(dir, "2.1");

                        JWSRandom random = new JWSRandom(ws.getDictionary(), true, 1.0); 	// set the upper limit on the scores

                        double max = 0.0;
                        String categ = "n";
                        String cats = POS.TAG_ADJECTIVE + " " + POS.TAG_ADVERB + " " + POS.TAG_NOUN + " " + POS.TAG_VERB;
                        for (String s : cats.split(" ")) {

                            System.out.println("\nmax\t\t\t" + random.max(w1, w2, s));
                            if (random.max(w1, w2, s) > max) {
                                max = random.max(w1, w2, s);
                            }
                        }
                        if (max > 0.5) {
                            return (1);
                        } else {
                            return (0);
                        }
                    } else {
                        return (2);
                    }
                }

            }
        }
    }
}
