
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.FlavorEvent;
import java.awt.datatransfer.FlavorListener;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.EditorKit;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainDownloadInterface.java
 *
 * Created on 20 Nov, 2013, 11:10:17 PM
 */
/**
 *
 * @author RAJ
 */
public class MainDownloadInterface extends javax.swing.JFrame {

    /** Creates new form MainDownloadInterface */
    static MainDownloadInterface mdi = null;

    public MainDownloadInterface() {
        this.setVisible(true);
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Seed Url");

        jButton1.setText("Get");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(167, 167, 167)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1)
                        .addGap(68, 68, 68)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String seeds = jTextArea1.getText();
        System.out.println(seeds);
        System.out.println(seeds.split("\\n").length);
        //String name=jTextField2.getText();
        //System.out.println(seed.split("[0-9][0-9][0-9].jpg")[0]);
        //System.out.println(name.substring(name.indexOf("/")+1));
        //boolean useproxy = jCheckBox1.isSelected();
        for (String seed : seeds.split("\\n")) {
            if (seed.contains("hentai2read")) {
                String folder = seed.split("/")[seed.split("/").length - 3];
                seed = seed.split("[0-9][0-9][0-9]\\.jpg")[0];
                
                //name = name.substring(name.indexOf("/")+1);
                String downloadpath = jFileChooser1.getSelectedFile().getAbsolutePath();
                Hentai2Read_Fakku_Downloader im = new Hentai2Read_Fakku_Downloader(false, downloadpath, seed, folder);
            } else if (seed.contains("pururin")) {
                String downloadpath = jFileChooser1.getSelectedFile().getAbsolutePath();
                PururinDownloader pd = new PururinDownloader();
                pd.pururin_download(seed, downloadpath);
            } else if (seed.contains("literotica")) {
                LiteroticaDownloader litD = new LiteroticaDownloader();
                String downloadpath = jFileChooser1.getSelectedFile().getAbsolutePath();
                litD.download_by_author(seed, downloadpath);
            } else if (seed.contains("g.e-hentai")) {
                GEHentaiDownloader gehD = new GEHentaiDownloader();
                String downloadpath = jFileChooser1.getSelectedFile().getAbsolutePath();
                gehD.gehentai_download(seed, downloadpath);
            } else if (seed.contains("fakku")) {
                String folder = seed.split("/")[seed.split("/").length - 3];
                seed = seed.split("[0-9][0-9][0-9]\\.jpg")[0];
                System.out.println("");
                //name = name.substring(name.indexOf("/")+1);
                String downloadpath = jFileChooser1.getSelectedFile().getAbsolutePath();
                Hentai2Read_Fakku_Downloader im = new Hentai2Read_Fakku_Downloader(false, downloadpath, seed, folder);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                mdi = new MainDownloadInterface();
            }
        });
        new ClipBoardListener().start();

    }

    static class ClipBoardListener extends Thread implements ClipboardOwner {

        Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();

        @Override
        public void run() {
            Transferable trans = sysClip.getContents(this);
            TakeOwnership(trans);

        }

        @Override
        public void lostOwnership(Clipboard c, Transferable t) {

            try {
                ClipBoardListener.sleep(250);  //waiting e.g for loading huge elements like word's etc.
            } catch (Exception e) {
                System.out.println("Exception: " + e);
            }
            Transferable contents = sysClip.getContents(this);
            try {
                process_clipboard(contents, c);
            } catch (Exception ex) {
                Logger.getLogger(ClipBoardListener.class.getName()).log(Level.SEVERE, null, ex);
            }
            TakeOwnership(contents);


        }

        void TakeOwnership(Transferable t) {
            sysClip.setContents(t, this);
        }

        public void process_clipboard(Transferable t, Clipboard c) { //your implementation
            String tempText;
            Transferable trans = t;

            try {
                if (trans != null ? trans.isDataFlavorSupported(DataFlavor.stringFlavor) : false) {
                    tempText = (String) trans.getTransferData(DataFlavor.stringFlavor);
                    mdi.jTextArea1.append(tempText + "\n");
                }

            } catch (Exception e) {
            }
        }
    }

    class MyThread implements Runnable {

        String base;
        String name;
        String downloadpath;
        boolean useproxy = false;

        public MyThread(boolean useproxy, String downloadpath, String base, String name) {
            this.useproxy = useproxy;
            this.base = base;
            this.name = name;
            this.downloadpath = downloadpath;
        }

        public void run() {
            Hentai2Read_Fakku_Downloader imageDownloader = new Hentai2Read_Fakku_Downloader(useproxy, downloadpath, base, name);
            System.gc();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
